// Generated by LiveScript 1.3.1
(function(){
  require('xonom').service('start', function(){}).run(function(){
    return require('colors');
  }).service('p', function(){
    return require('prelude-ls');
  }).service('repo', function(){
    return {
      commands: []
    };
  }).run(__dirname + "/compiled-commands/*.js").run(function(repo, p){
    var cmd, argv, lines, print, printLines, build, nothingLines, lineLines, lineLine, linesLines, linesLine, readline, rl;
    cmd = process.argv[1].match(/[a-z]+$/i)[0];
    argv = process.argv[2];
    lines = [];
    print = function(res){
      if (res != null) {
        return console.log(res);
      }
    };
    printLines = function(items){
      return items != null ? items.forEach(print) : void 8;
    };
    build = function(type){
      return p.pairsToObj(
      p.map(function(it){
        return [it.name, it.compile()];
      })(
      p.filter(function(it){
        return it.input + "-" + it.output === type;
      })(
      p.filter(function(it){
        return it.enabled;
      })(
      repo.commands))));
    };
    nothingLines = build('nothing-lines');
    lineLines = build('line-lines');
    lineLine = build('line-line');
    linesLines = build('lines-lines');
    linesLine = build('lines-line');
    if (nothingLines[cmd] != null) {
      if (typeof nothingLines[cmd] == 'function') {
        nothingLines[cmd](argv, printLines);
      }
      return;
    }
    readline = require('readline');
    rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
      terminal: false
    });
    rl.on('line', function(line){
      if (lineLines[cmd] != null || lineLine[cmd] != null) {
        if (typeof lineLines[cmd] == 'function') {
          lineLines[cmd](argv, line, printLines);
        }
        return print(typeof lineLine[cmd] == 'function' ? lineLine[cmd](argv, line) : void 8);
      } else {
        return lines.push(line);
      }
    });
    return rl.on('close', function(){
      var ref$, res;
      if (typeof linesLines[cmd] == 'function') {
        if ((ref$ = linesLines[cmd](argv, lines)) != null) {
          ref$.forEach(print);
        }
      }
      res = typeof linesLine[cmd] == 'function' ? linesLine[cmd](argv, lines) : void 8;
      if (res != null) {
        return print(res);
      }
    });
  });
}).call(this);
